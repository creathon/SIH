package com.creathon.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.creathon.bean.LocationPermission;
import com.creathon.bean.SessionBean;
import com.creathon.bean.ShootApplication;
import com.creathon.service.LocationPermissionService;
import com.creathon.service.ManageApplicationService;
import com.creathon.service.ShootApplicationService;
import com.creathon.service.StatusService;

@Controller
public class ManageApplicationController {

	@Autowired
	ManageApplicationService manageApplicationService;

	@Autowired
	StatusService statusService;
	
	@Autowired
	ShootApplicationService shootApplicationService;

	@Autowired
	LocationPermissionService locationPermissionService;

	@RequestMapping(value = "/manageApplications", method = RequestMethod.GET)
	public ModelAndView manageApplications(ModelMap model, HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("manage_application");
		SessionBean sessionBean = (SessionBean) request.getSession().getAttribute("sessionBean");
		if (sessionBean != null) {
			/*mav.addObject("applicationList", manageApplicationService.listOfShootApplication());*/
			List<ShootApplication> applicationList = manageApplicationService.listOfShootApplicationByViewStatus("0");
			if(applicationList.size()==0 || applicationList.isEmpty()){
				mav.addObject("error","Your agency does not have any registered applications!!");
			}
			mav.addObject("applicationList", applicationList);
		} else {
			return new ModelAndView("redirect:/");
		}
		return mav;
	}
	
	@RequestMapping(value = "/viewedApplications", method = RequestMethod.GET)
	public ModelAndView viewedApplications(ModelMap model, HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("viewed_applications");
		SessionBean sessionBean = (SessionBean) request.getSession().getAttribute("sessionBean");
		if (sessionBean != null) {
			/*mav.addObject("applicationList", manageApplicationService.listOfShootApplication());*/
			List<ShootApplication> applicationList = manageApplicationService.listOfShootApplicationByViewStatus("1");
			if(applicationList.size()==0 || applicationList.isEmpty()){
				mav.addObject("error","You have not viewed any applications!!");
			}
			mav.addObject("applicationList", applicationList);
		} else {
			return new ModelAndView("redirect:/");
		}
		return mav;
	}
	

	@RequestMapping(value = "/viewApplicationDetails", method = RequestMethod.GET)
	public ModelAndView viewApplicationDetails(@RequestParam("Id") Integer applicationId, ModelMap model,
			HttpServletRequest request) {
		ModelAndView mav = new ModelAndView("view_application_details");
		SessionBean sessionBean = (SessionBean) request.getSession().getAttribute("sessionBean");
		System.out.println(sessionBean);
		if (sessionBean != null) {
			System.out.println("Application id-->" + applicationId);
			if (applicationId != null) {
				try {
					ShootApplication shootApplication = manageApplicationService.findByApplicationId(applicationId);
					shootApplication.setViewStatus("1");
					if(shootApplicationService.save(shootApplication)){
						System.out.println("Update successfull");
					}
					System.out.println("ShootApplication-->" + shootApplication);
					mav.addObject("shootApplication", shootApplication);
					mav.addObject("listOfStatus", statusService.listOfStatus());
					LocationPermission locationPermission = locationPermissionService.findByShootAppIdAgnId(
							shootApplication.getId(), shootApplication.getLocation().getAgencyId().getId());
					mav.addObject("locationPermission", locationPermission);
					System.out.println("location permission object -->" + locationPermission);
					System.out.println("locationPermissionSize" + shootApplication.getLocationPermissions().size());
				} catch (Exception e) {
					e.printStackTrace();
				}

			}
		} else {
			return new ModelAndView("redirect:/");
		}
		return mav;
	}

	@RequestMapping(value = "/changeApplicationStatus", method = RequestMethod.POST)
	public ModelAndView changeApplicationStatus(
			@ModelAttribute("locationPermission") LocationPermission locationPermission, ModelMap model,
			HttpServletRequest request) {
		ModelAndView mav = new ModelAndView();
		SessionBean sessionBean = (SessionBean) request.getSession().getAttribute("sessionBean");
		System.out.println(sessionBean);
		if (sessionBean != null) {
			if(locationPermission.getStatus().getId()==6){
				mav = new ModelAndView("approved_applications");
				if (locationPermissionService.update(locationPermission)) {
					mav.addObject("success", "Application permissions successfully approved");
				} else {
					mav.addObject("error", "Application permissions could not be approved");
				}

			}else if(locationPermission.getStatus().getId()==7){
				mav = new ModelAndView("rejected_applications");
				if (locationPermissionService.update(locationPermission)) {
					mav.addObject("success", "Application permissions successfully rejected");
				} else {
					mav.addObject("error", "Application permissions could not be rejected");
				}
			}else{
				mav = new ModelAndView("viewed_applications");
				if (locationPermissionService.update(locationPermission)) {
					mav.addObject("success", "Application permissions successfully updated");
				} else {
					mav.addObject("error", "Application permissions could not be updated");
				}
			}
			return mav;
		} else {
			return new ModelAndView("redirect:/");
		}
	}

}
